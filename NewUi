-- discord.gg/ancestral
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RenderStepped = RunService.RenderStepped
local ProtectGui = protectgui or (syn and syn.protect_gui) or function() end

local function generateRandomString(length)
    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:',.<>/?`~"
    local str = {}
    for i = 1, length do
        local randIndex = math.random(1, #chars)
        str[i] = string.sub(chars, randIndex, randIndex)
    end
    return table.concat(str)
end

local Custom = {} do
    Custom.ColorRGB = Color3.fromRGB(25, 25, 112)
    Custom.AccentColor = Color3.fromRGB(75, 0, 130)
    Custom.DarkBlue = Color3.fromRGB(25, 25, 112)
    Custom.BackgroundDark = Color3.fromRGB(12, 12, 25)
    Custom.FrameDark = Color3.fromRGB(20, 20, 35)

    function Custom:Create(Name, Properties, Parent)
        local _instance = Instance.new(Name)

        for i, v in pairs(Properties) do
            _instance[i] = v
        end

        if Parent then
            _instance.Parent = Parent
        end

        return _instance
    end
end

local function OpenClose()
  local ScreenGui = Custom:Create("ScreenGui", {
    Name = "OpenClose",
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling
  }, RunService:IsStudio() and LocalPlayer.PlayerGui or game:GetService("CoreGui"))
  ProtectGui(screenGui)
  local Close_ImageButton = Custom:Create("ImageButton", {
    BackgroundColor3 = Custom.BackgroundDark,
    BorderColor3 = Custom.ColorRGB,
    BorderSizePixel = 1,
    Position = UDim2.new(0.1021, 0, 0.0743, 0),
    Size = UDim2.new(0, 59, 0, 49),
    Image = "rbxassetid://85779221265543",
    Visible = false
  }, ScreenGui)

  local UICorner = Custom:Create("UICorner", {
    Name = "MainCorner",
    CornerRadius = UDim.new(0, 12),
  }, Close_ImageButton)
  local UIGradient = Custom:Create("UIGradient", {
    Color = ColorSequence.new{
      ColorSequenceKeypoint.new(0, Custom.ColorRGB),
      ColorSequenceKeypoint.new(0.5, Custom.AccentColor),
      ColorSequenceKeypoint.new(1, Custom.DarkBlue)
    },
    Rotation = 45,
  }, Close_ImageButton)

  local dragging, dragStart, startPos = false, nil, nil

  local function UpdateDraggable(input)
    local delta = input.Position - dragStart
    Close_ImageButton.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
  end

  Close_ImageButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
      dragging = true
      dragStart = input.Position
      startPos = Close_ImageButton.Position

      input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
          dragging = false
        end
      end)
    end
  end)

  Close_ImageButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
      UpdateDraggable(input)
    end
  end)

  return Close_ImageButton
end

local Open_Close = OpenClose()


local function MakeDraggable(topbarObject, object)
    local dragging = false
    local dragStart
    local startPos
    local targetPos = object.Position
    local smoothness = 0.15
    local releaseTweenTime = 0.25

    local function UpdateTarget(input)
        local delta = input.Position - dragStart
        targetPos = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    topbarObject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = object.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false

                    local tween = TweenService:Create(object, TweenInfo.new(releaseTweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = targetPos})
                    tween:Play()
                end
            end)
        end
    end)

    topbarObject.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            UpdateTarget(input)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            UpdateTarget(input)
        end
    end)

    RunService.RenderStepped:Connect(function()
        if dragging then
            object.Position = object.Position:Lerp(targetPos, smoothness)
        end
    end)
end

MakeDraggable(Open_Close, Open_Close)

function CircleClick(Button, X, Y)
    task.spawn(function()
        Button.ClipsDescendants = true
        
        local Circle = Instance.new("ImageLabel")
        Circle.Image = "rbxassetid://266543268"
        Circle.ImageColor3 = Custom.ColorRGB
        Circle.ImageTransparency = 0.7
        Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Circle.BackgroundTransparency = 1
        Circle.ZIndex = 10
        Circle.Name = "Circle"
        Circle.Parent = Button
        
        local NewX = X - Button.AbsolutePosition.X
        local NewY = Y - Button.AbsolutePosition.Y
        Circle.Position = UDim2.new(0, NewX, 0, NewY)

        local Size = math.max(Button.AbsoluteSize.X, Button.AbsoluteSize.Y) * 1.5

        local Time = 0.5
        local TweenInfo = TweenInfo.new(Time, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

        local Tween = TweenService:Create(Circle, TweenInfo, {
            Size = UDim2.new(0, Size, 0, Size),
            Position = UDim2.new(0.5, -Size/2, 0.5, -Size/2)
        })
        
        Tween:Play()
        
        Tween.Completed:Connect(function()
            for i = 1, 10 do
                Circle.ImageTransparency = Circle.ImageTransparency + 0.01
                wait(Time / 10)
            end
            Circle:Destroy()
        end)
    end)
end

local Speed_Library, Notification = {}, {}
Speed_Library.Unloaded = false

function Speed_Library:SetNotification(Config)
    local Title = Config[1] or Config.Title or ""
    local Description = Config[2] or Config.Description or ""
    local Content = Config[3] or Config.Content or ""
    local Time = Config[5] or Config.Time or 0.5
    local Delay = Config[6] or Config.Delay or 5

    local NotificationGui = Custom:Create("ScreenGui", {
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Name = "NotificationGui"
    })
    ProtectGui(NotificationGui)
    local NotificationLayout = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(1,1),
        BackgroundTransparency = 0.999,
        Position = UDim2.new(1,-30,1,-30),
        Size = UDim2.new(0,320,1,0),
        Name = "NotificationLayout"
    }, NotificationGui)

    local Count = 0
    NotificationLayout.ChildRemoved:Connect(function()
        Count = 0
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
        for _, v in ipairs(NotificationLayout:GetChildren()) do
            local NewPOS = UDim2.new(0,0,1,-((v.Size.Y.Offset + 12) * Count))
            TweenService:Create(v,tweenInfo,{Position=NewPOS}):Play()
            Count = Count + 1
        end
    end)

    local _Count = 0
    for _, v in ipairs(NotificationLayout:GetChildren()) do
        _Count = -(v.Position.Y.Offset) + v.Size.Y.Offset + 12
    end

    local NotificationFrame = Custom:Create("Frame", {
        BackgroundColor3 = Custom.BackgroundDark,
        BorderSizePixel = 0,
        Size = UDim2.new(1,0,0,150),
        Name = "NotificationFrame",
        BackgroundTransparency = 1,
        AnchorPoint = Vector2.new(0,1),
        Position = UDim2.new(0,0,1,-(_Count))
    }, NotificationLayout)

    local NotificationFrameReal = Custom:Create("Frame", {
        BackgroundColor3 = Custom.BackgroundDark,
        BorderSizePixel = 0,
        Position = UDim2.new(0,400,0,0),
        Size = UDim2.new(1,0,1,0),
        Name = "NotificationFrameReal"
    }, NotificationFrame)

    Custom:Create("UICorner",{CornerRadius=UDim.new(0,12)}, NotificationFrameReal)
    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.BackgroundDark),
            ColorSequenceKeypoint.new(0.5, Custom.FrameDark),
            ColorSequence.new(1, Custom.AccentColor)
        },
        Rotation = 135,
    }, NotificationFrameReal)

    local DropShadowHolder = Custom:Create("Frame", {
        BackgroundTransparency=1,
        BorderSizePixel=0,
        Size=UDim2.new(1,0,1,0),
        ZIndex=0,
        Name="DropShadowHolder",
        Parent=NotificationFrameReal
    })

    local DropShadow = Custom:Create("ImageLabel", {
        Image="rbxassetid://6015897843",
        ImageColor3=Custom.BackgroundDark,
        ImageTransparency=0.3,
        ScaleType=Enum.ScaleType.Slice,
        SliceCenter=Rect.new(49,49,450,450),
        AnchorPoint=Vector2.new(0.5,0.5),
        BackgroundTransparency=1,
        BorderSizePixel=0,
        Position=UDim2.new(0.5,0,0.5,0),
        Size=UDim2.new(1,47,1,47),
        ZIndex=0,
        Name="DropShadow",
        Parent=DropShadowHolder
    })

    local Top = Custom:Create("Frame", {
        BackgroundTransparency=0.999,
        Size=UDim2.new(1,0,0,36),
        Name="Top",
        Parent=NotificationFrameReal
    })

    local TextLabel = Custom:Create("TextLabel", {
        Font=Enum.Font.GothamBold,
        Text=Title,
        TextColor3=Color3.fromRGB(255,255,255),
        TextSize=14,
        TextXAlignment=Enum.TextXAlignment.Left,
        BackgroundTransparency=0.999,
        Size=UDim2.new(1,0,1,0),
        Position=UDim2.new(0,10,0,0),
        Parent=Top
    })

    Custom:Create("UIStroke",{Color=Color3.fromRGB(255,255,255),Thickness=0.5,Parent=TextLabel})
    Custom:Create("UICorner",{Parent=Top,CornerRadius=UDim.new(0,8)})

    local TextLabel1 = Custom:Create("TextLabel", {
        Font=Enum.Font.GothamBold,
        Text=Description,
        TextColor3=Custom.ColorRGB,
        TextSize=14,
        TextXAlignment=Enum.TextXAlignment.Left,
        BackgroundTransparency=0.999,
        Size=UDim2.new(1,0,1,0),
        Position=UDim2.new(0,TextLabel.TextBounds.X+15,0,0),
        Parent=Top
    })

    Custom:Create("UIStroke",{Color=Custom.ColorRGB,Thickness=0.6,Parent=TextLabel1})

    local Close = Custom:Create("TextButton", {
        Font=Enum.Font.SourceSans,
        Text="",
        BackgroundTransparency=0.999,
        AnchorPoint=Vector2.new(1,0.5),
        Position=UDim2.new(1,-5,0.5,0),
        Size=UDim2.new(0,25,0,25),
        Name="Close",
        Parent=Top
    })

    local ImageLabel = Custom:Create("ImageLabel", {
        Image="rbxassetid://9886659671",
        ImageColor3=Custom.ColorRGB,
        AnchorPoint=Vector2.new(0.5,0.5),
        BackgroundTransparency=0.999,
        BorderSizePixel=0,
        Position=UDim2.new(0.49,0,0.5,0),
        Size=UDim2.new(1,-8,1,-8),
        Parent=Close
    })

    local TextLabel2 = Custom:Create("TextLabel", {
        Font=Enum.Font.GothamBold,
        TextColor3=Color3.fromRGB(200,200,200),
        TextSize=13,
        Text=Content,
        TextXAlignment=Enum.TextXAlignment.Left,
        TextYAlignment=Enum.TextYAlignment.Top,
        BackgroundTransparency=0.999,
        BorderSizePixel=0,
        Position=UDim2.new(0,10,0,27),
        Size=UDim2.new(1,-20,0,13),
        Parent=NotificationFrameReal,
        TextWrapped=true
    })

    TextLabel2.Size = UDim2.new(1,-20,0,13+(13*(TextLabel2.TextBounds.X//TextLabel2.AbsoluteSize.X)))

    if TextLabel2.AbsoluteSize.Y < 27 then
        NotificationFrame.Size = UDim2.new(1,0,0,65)
    else
        NotificationFrame.Size = UDim2.new(1,0,0,TextLabel2.AbsoluteSize.Y+40)
    end

    local Waitted = false
    function Notification:Close()
        if Waitted then return false end
        Waitted = true
        local tween = TweenService:Create(NotificationFrameReal,TweenInfo.new(tonumber(Time), Enum.EasingStyle.Back, Enum.EasingDirection.InOut),{Position=UDim2.new(0,400,0,0)})
        tween:Play()
        task.wait(tonumber(Time)/1.2)
        NotificationFrame:Destroy()
        Waitted = false
    end

    Close.Activated:Connect(function() Notification:Close() end)

    TweenService:Create(NotificationFrameReal, TweenInfo.new(tonumber(Time), Enum.EasingStyle.Back, Enum.EasingDirection.InOut), {Position=UDim2.new(0,0,0,0)} ):Play()
    task.delay(tonumber(Delay), Notification.Close)

    return Notification
end


function Speed_Library:CreateWindow(Config)
    local Title = Config[1] or Config.Title or ""
    local Description = Config[2] or Config.Description or ""
    local TabWidth = Config[3] or Config["Tab Width"] or 120
    local SizeUi = Config[4] or Config.SizeUi or UDim2.fromOffset(550, 315)

    local Funcs = {}

    
  local SpeedHubXGui = Custom:Create("ScreenGui", {
      Name = "ShieldTeam || Luowis",
      ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    }, RunService:IsStudio() and LocalPlayer.PlayerGui or game:GetService("CoreGui"))
    ProtectGui(SpeedHubXGui)

    local DropShadowHolder = Custom:Create("Frame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 455, 0, 350),
        ZIndex = 0,
        Name = generateRandomString(12),
        Position = UDim2.new(0, (SpeedHubXGui.AbsoluteSize.X // 2 - 455 // 2), 0, (SpeedHubXGui.AbsoluteSize.Y // 2 - 350 // 2))
    }, SpeedHubXGui)

    local DropShadow = Custom:Create("ImageLabel", {
        Image = "rbxassetid://6015897843",
        ImageColor3 = Custom.BackgroundDark,
        ImageTransparency = 0.3,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = SizeUi,
        ZIndex = 0,
        Name = generateRandomString(12)
    }, DropShadowHolder)

    local Main = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Custom.BackgroundDark,
        BackgroundTransparency = 0.05,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = SizeUi,
        Name = generateRandomString(12)
    }, DropShadow)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 16)
    }, Main)

    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.BackgroundDark),
            ColorSequenceKeypoint.new(0.3, Custom.FrameDark),
            ColorSequenceKeypoint.new(0.7, Custom.AccentColor),
            ColorSequenceKeypoint.new(1, Custom.DarkBlue)
        },
        Rotation = 135,
    }, Main)

    Custom:Create("UIStroke", {
        Color = Custom.ColorRGB,
        Thickness = 2,
        Transparency = 0.3
    }, Main)

    local Top = Custom:Create("Frame", {
        BackgroundColor3 = Custom.BackgroundDark,
        BackgroundTransparency = 0.2,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 38),
        Name = "Top"
    }, Main)

    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.FrameDark),
            ColorSequenceKeypoint.new(1, Custom.AccentColor)
        },
        Rotation = 90,
    }, Top)

    local TextLabel = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.35, 0),
        Size = UDim2.new(0.5, 0, 0.3, 0)
    }, Top)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 16)
    }, Top)

    Custom:Create("UIStroke", {
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 0.8,
        Transparency = 0.7
    }, TextLabel)

    local TextLabel1 = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Description,
        TextColor3 = Custom.ColorRGB,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center,
        TextYAlignment = Enum.TextYAlignment.Center,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.72, 0),
        Size = UDim2.new(0.5, 0, 0.3, 0)
    }, Top)

    Custom:Create("UIStroke", {
        Color = Custom.ColorRGB,
        Thickness = 0.6
    }, TextLabel1)

    local Close = Custom:Create("TextButton", {
        Font = Enum.Font.SourceSans,
        Text = "",
        TextColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -8, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Name = "Close"
    }, Top)

    local ImageLabel1 = Custom:Create("ImageLabel", {
        Image = "rbxassetid://9886659671",
        ImageColor3 = Custom.ColorRGB,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.49, 0, 0.5, 0),
        Size = UDim2.new(1, -8, 1, -8)
    }, Close)

    local Min = Custom:Create("TextButton", {
        Font = Enum.Font.SourceSans,
        Text = "",
        TextColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -42, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Name = "Min"
    }, Top)

    Custom:Create("ImageLabel", {
        Image = "rbxassetid://9886659276",
        ImageColor3 = Custom.DarkBlue,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -8, 1, -8)
    }, Min)

    local LayersTab = Custom:Create("Frame", {
        BackgroundColor3 = Custom.FrameDark,
        BackgroundTransparency = 0.1,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 9, 0, 50),
        Size = UDim2.new(0, TabWidth, 1, -59),
        Name = "LayersTab"
    }, Main)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 8)
    }, LayersTab)

    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.FrameDark),
            ColorSequenceKeypoint.new(1, Custom.AccentColor)
        },
        Rotation = 45,
    }, LayersTab)

    Custom:Create("UIStroke", {
        Color = Custom.ColorRGB,
        Thickness = 1,
        Transparency = 0.6
    }, LayersTab)

    Custom:Create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Custom.ColorRGB,
        BackgroundTransparency = 0.3,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0, 38),
        Size = UDim2.new(1, 0, 0, 2),
        Name = "DecideFrame"
    }, Main)

    local Layers = Custom:Create("Frame", {
        BackgroundColor3 = Custom.FrameDark,
        BackgroundTransparency = 0.1,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, TabWidth + 18, 0, 50),
        Size = UDim2.new(1, -(TabWidth + 9 + 18), 1, -59),
        Name = "Layers"
    }, Main)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 8)
    }, Layers)

    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.FrameDark),
            ColorSequenceKeypoint.new(0.6, Custom.BackgroundDark),
            ColorSequenceKeypoint.new(1, Custom.AccentColor)
        },
        Rotation = 90,
    }, Layers)

    Custom:Create("UIStroke", {
        Color = Custom.DarkBlue,
        Thickness = 1,
        Transparency = 0.5
    }, Layers)

    local NameTab = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = "",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 24,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Name = "NameTab"
    }, Layers)

    Custom:Create("UIStroke", {
        Color = Custom.ColorRGB,
        Thickness = 0.8,
        Transparency = 0.4
    }, NameTab)

    local LayersReal = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(0, 1),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 1, -33),
        Name = "LayersReal"
    }, Layers)

    local LayersFolder = Custom:Create("Folder", {
        Name = "LayersFolder"
    }, LayersReal)

    local LayersPageLayout = Custom:Create("UIPageLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Name = "LayersPageLayout",
        TweenTime = 0.5,
        EasingDirection = Enum.EasingDirection.InOut,
        EasingStyle = Enum.EasingStyle.Quad
    }, LayersFolder)

    local ScrollTab = Custom:Create("ScrollingFrame", {
        CanvasSize = UDim2.new(0, 0, 2.10000002, 0),
        ScrollBarImageColor3 = Custom.ColorRGB,
        ScrollBarThickness = 3,
        Active = true,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, -10),
        Name = "ScrollTab"
    }, LayersTab)

    local UIListLayout = Custom:Create("UIListLayout", {
        Padding = UDim.new(0, 2),
        SortOrder = Enum.SortOrder.LayoutOrder
    }, ScrollTab)

    local function UpdateSize()
        local _Total = 0

        for _, v in pairs(ScrollTab:GetChildren()) do
            if v.Name ~= "UIListLayout" then
                _Total = _Total + 5 + v.Size.Y.Offset
            end
        end

        ScrollTab.CanvasSize = UDim2.new(0, 0, 0, _Total)
    end

    ScrollTab.ChildAdded:Connect(UpdateSize)
    ScrollTab.ChildRemoved:Connect(UpdateSize)

    Min.Activated:Connect(function()
        CircleClick(Min, Player:GetMouse().X, Player:GetMouse().Y)
        DropShadowHolder.Visible = false

        if not Open_Close.Visible then Open_Close.Visible = true end
    end)

    Open_Close.Activated:Connect(function()
        DropShadowHolder.Visible = true
        if Open_Close.Visible then Open_Close.Visible = false end
    end)

    Close.Activated:Connect(function()
        CircleClick(Close, Player:GetMouse().X, Player:GetMouse().Y)
        if SpeedHubXGui then SpeedHubXGui:Destroy() end
        if not Speed_Library.Unloaded then Speed_Library.Unloaded = true end
    end)

    DropShadowHolder.Size = UDim2.new(0, 115 + TextLabel.TextBounds.X + 1 + TextLabel1.TextBounds.X, 0, 350)
    MakeDraggable(Top, DropShadowHolder)

    local MoreBlur = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(1, 1),
        BackgroundColor3 = Custom.BackgroundDark,
        BackgroundTransparency = 1,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Position = UDim2.new(1, 8, 1, 8),
        Size = UDim2.new(1, 154, 1, 54),
        Visible = false,
        Name = "MoreBlur"
    }, Layers)

    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.BackgroundDark),
            ColorSequenceKeypoint.new(0.5, Custom.FrameDark),
            ColorSequenceKeypoint.new(1, Custom.AccentColor)
        },
        Rotation = 90,
    }, MoreBlur)

    local DropShadowHolder1 = Custom:Create("Frame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 0,
        Name = "DropShadowHolder"
    }, MoreBlur)

    local DropShadow1 = Custom:Create("ImageLabel", {
        Image = "rbxassetid://6015897843",
        ImageColor3 = Custom.BackgroundDark,
        ImageTransparency = 0.2,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 35, 1, 35),
        ZIndex = 0,
        Name = "DropShadow"
    }, DropShadowHolder1)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 12)
    }, MoreBlur)

    local ConnectButton = Custom:Create("TextButton", {
        Font = Enum.Font.SourceSans,
        Text = "",
        TextColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Name = "ConnectButton",
    }, MoreBlur)

    local DropdownSelect = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Custom.FrameDark,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        LayoutOrder = 1,
        Position = UDim2.new(1, 172, 0.5, 0),
        Size = UDim2.new(0, 160, 1, -16),
        Name = "DropdownSelect",
        ClipsDescendants = true,
    }, MoreBlur)

    ConnectButton.Activated:Connect(function()
        if MoreBlur.Visible then
            local tweenInfo = TweenInfo.new(0.2)

            local _Hide = TweenService:Create(MoreBlur, tweenInfo, {BackgroundTransparency = 0.999})
            local _Move = TweenService:Create(DropdownSelect, tweenInfo, {Position = UDim2.new(1, 172, 0.5, 0)})

            _Hide:Play()
            _Move:Play()
            
            task.wait(0.2)
            MoreBlur.Visible = false
        end
    end)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
    }, DropdownSelect)

    Custom:Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Custom.FrameDark),
            ColorSequenceKeypoint.new(1, Custom.BackgroundDark)
        },
        Rotation = 135,
    }, DropdownSelect)

    Custom:Create("UIStroke", {
        Color = Custom.ColorRGB,
        Thickness = 2,
        Transparency = 0.4,
    }, DropdownSelect)

    local DropdownSelectReal = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        LayoutOrder = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, -10, 1, -10),
        Name = "DropdownSelectReal",
    }, DropdownSelect)

    local DropdownFolder = Custom:Create("Folder", {
        Name = "DropdownFolder",
    }, DropdownSelectReal)

    local DropPageLayout = Custom:Create("UIPageLayout", {
        EasingDirection = Enum.EasingDirection.InOut,
        EasingStyle = Enum.EasingStyle.Quad,
        TweenTime = 0.01,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Archivable = false,
        Name = "DropPageLayout",
    }, DropdownFolder)

    -- Create Tab Function
    local Tabs = {}
    local CountTab = 0
    local CountDropdown = 0

    function Tabs:CreateTab(Config)
        local _Name = Config[1] or Config.Name or "" 
        local Icon = Config[2] or Config.Icon or ""
        
        local ScrolLayers = Custom:Create("ScrollingFrame", {
            ScrollBarImageColor3 = Custom.ColorRGB,
            ScrollBarThickness = 4,
            Active = true,
            LayoutOrder = CountTab,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.999,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            Name = "ScrolLayers",
        }, LayersFolder)

        Custom:Create("UIListLayout", {
            Padding = UDim.new(0, 4),
            SortOrder = Enum.SortOrder.LayoutOrder,
        }, ScrolLayers)

        local Tab = Custom:Create("Frame", {
            BackgroundColor3 = CountTab == 0 and Custom.FrameDark or Custom.BackgroundDark,
            BackgroundTransparency = CountTab == 0 and 0.3 or 0.7,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            LayoutOrder = CountTab,
            Size = UDim2.new(1, 0, 0, 35),
            Name = "Tab",
        }, ScrollTab)

        Custom:Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
        }, Tab)

        Custom:Create("UIGradient", {
            Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Custom.FrameDark),
                ColorSequenceKeypoint.new(0.5, Custom.AccentColor),
                ColorSequenceKeypoint.new(1, Custom.DarkBlue)
            },
            Rotation = 45,
        }, Tab)

        Custom:Create("UIStroke", {
            Color = CountTab == 0 and Custom.ColorRGB or Color3.fromRGB(60, 60, 80),
            Thickness = 1.5,
            Transparency = CountTab == 0 and 0.2 or 0.8
        }, Tab)

        local TabButton = Custom:Create("TextButton", {
            Font = Enum.Font.GothamBold,
            Text = "",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.999,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            Name = "TabButton",
        }, Tab)

        local TabName = Custom:Create("TextLabel", {
            Font = Enum.Font.GothamBold,
            Text = _Name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.9990000128746033,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            Position = UDim2.new(0, 32, 0, 0),
            Name = "TabName",
        }, Tab)

        Custom:Create("UIStroke", {
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 0.6,
            Transparency = 0.5
        }, TabName)

        Custom:Create("ImageLabel", {
            Image = Icon,
            ImageColor3 = Custom.ColorRGB,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.999,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            Position = UDim2.new(0, 8, 0, 8),
            Size = UDim2.new(0, 18, 0, 18),
            Name = "FeatureImg",
        }, Tab)

        if CountTab == 0 then
            LayersPageLayout:JumpToIndex(0)
            NameTab.Text = _Name
    
            local ChooseFrame = Custom:Create("Frame", {
                BackgroundColor3 = Custom.ColorRGB,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 3, 0, 12),
                Size = UDim2.new(0, 2, 0, 16),
                Name = "ChooseFrame",
            }, Tab)
    
            Custom:Create("UIStroke", {
                Color = Custom.ColorRGB,
                Thickness = 2,
            }, ChooseFrame)
    
            Custom:Create("UICorner", {
                CornerRadius = UDim.new(0, 3)
            }, ChooseFrame)

            Custom:Create("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Custom.ColorRGB),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Custom.ColorRGB)
                },
                Rotation = 90,
            }, ChooseFrame)
        end

        TabButton.Activated:Connect(function()
            CircleClick(TabButton, Player:GetMouse().X, Player:GetMouse().Y)
            local FrameChoose = nil

            for _, s in pairs(ScrollTab:GetChildren()) do
                for _, v in pairs(s:GetChildren()) do
                    if v.Name == "ChooseFrame" then
                        FrameChoose = v
                        break
                    end
                end

                if FrameChoose then break end
            end
    
            if FrameChoose and Tab.LayoutOrder ~= LayersPageLayout.CurrentPage.LayoutOrder then
                for _, TabFrame in pairs(ScrollTab:GetChildren()) do
                    if TabFrame.Name == "Tab" then
                        local stroke = TabFrame:FindFirstChild("UIStroke")
                        TweenService:Create(TabFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.7}):Play()
                        if stroke then
                            TweenService:Create(stroke, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.InOut), {Transparency = 0.8}):Play()
                        end
                    end
                end
    
                local _TabT = TweenService:Create(Tab, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.InOut), {BackgroundTransparency = 0.3})
                local _TabStroke = TweenService:Create(Tab:FindFirstChild("UIStroke"), TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.InOut), {Transparency = 0.2})
                local _FTween = TweenService:Create(FrameChoose, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(0, 3, 0, 12 + (37 * Tab.LayoutOrder))})
    
                _TabT:Play()
                _TabStroke:Play()
                _FTween:Play()
    
                LayersPageLayout:JumpToIndex(Tab.LayoutOrder)
    
                task.wait(0.05)
                NameTab.Text = _Name
    
                TweenService:Create(FrameChoose, TweenInfo.new(0.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 2, 0, 22)}):Play()
    
                task.wait(0.2)
                TweenService:Create(FrameChoose, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 2, 0, 16)}):Play()
            end
        end)

        local Sections, CountSection = {}, 0

        function Sections:AddSection(Title, OpenSection)
            local Title = Title or ""
            local OpenSection = OpenSection or false
    
            local Section = Custom:Create("Frame", {
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 0.999,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                ClipsDescendants = true,
                LayoutOrder = CountSection,
                Size = UDim2.new(1, 0, 0, 35),
                Name = "Section"
            }, ScrolLayers)
    
            local SectionReal = Custom:Create("Frame", {
                AnchorPoint = Vector2.new(0.5, 0),
                BackgroundColor3 = Custom.FrameDark,
                BackgroundTransparency = 0.2,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                LayoutOrder = 1,
                Position = UDim2.new(0.5, 0, 0, 0),
                Size = UDim2.new(1, 1, 0, 35),
                Name = "SectionReal"
            }, Section)
    
            Custom:Create("UICorner", {
                CornerRadius = UDim.new(0, 8)
            }, SectionReal)

            Custom:Create("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Custom.FrameDark),
                    ColorSequenceKeypoint.new(1, Custom.AccentColor)
                },
                Rotation = 90,
            }, SectionReal)

            Custom:Create("UIStroke", {
                Color = Custom.DarkBlue,
                Thickness = 1.2,
                Transparency = 0.6
            }, SectionReal)

            local SectionButton = Custom:Create("TextButton", {
                Font = Enum.Font.SourceSans,
                Text = "",
                TextColor3 = Color3.fromRGB(0, 0, 0),
                TextSize = 14,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 0.999,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 1, 0),
                Name = "SectionButton"
            }, SectionReal)
    
            local FeatureFrame = Custom:Create("Frame", {
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = Custom.ColorRGB,
                BackgroundTransparency = 0.2,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                Position = UDim2.new(1, -8, 0.5, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Name = "FeatureFrame"
            }, SectionReal)

            Custom:Create("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }, FeatureFrame)
    
            local FeatureImg = Custom:Create("ImageLabel", {
                Image = "rbxassetid://16851841101",
                ImageColor3 = Color3.fromRGB(255, 255, 255),
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 0.9990000128746033,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                Position = UDim2.new(0.5, 0, 0.5, 0),
                Rotation = -90,
                Size = UDim2.new(1, 4, 1, 4),
                Name = "FeatureImg"
            }, FeatureFrame)
    
            local SectionTitle = Custom:Create("TextLabel", {
                Font = Enum.Font.GothamBold,
                Text = Title,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextStrokeColor3 = Custom.ColorRGB,
                TextStrokeTransparency = 0.6,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 0.9990000128746033,
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 12, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Name = "SectionTitle"
            }, SectionReal)
    
  
      local SectionDecideFrame = Custom:Create("Frame", {
        BackgroundColor3 = Custom.ColorRGB,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        AnchorPoint = Vector2.new(0.5, 0),
        Position = UDim2.new(0.5, 0, 0, 38),
        Size = UDim2.new(0, 0, 0, 3),
        Name = "SectionDecideFrame"
      }, Section)

      Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 2)
      }, SectionDecideFrame)

      Custom:Create("UIGradient", {
        Color = ColorSequence.new{
          ColorSequenceKeypoint.new(0, Custom.BackgroundDark),
          ColorSequenceKeypoint.new(0.5, Custom.ColorRGB),
          ColorSequenceKeypoint.new(1, Custom.BackgroundDark)
        }
      }, SectionDecideFrame)
  
      local SectionAdd = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.9990000128746033,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        ClipsDescendants = true,
        LayoutOrder = 1,
        Position = UDim2.new(0.5, 0, 0, 44),
        Size = UDim2.new(1, 0, 0, 100),
        Name = "SectionAdd"
      }, Section)
  
      Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 6)
      }, SectionAdd)
    
      Custom:Create("UIListLayout", {
        Padding = UDim.new(0, 4),
        SortOrder = Enum.SortOrder.LayoutOrder
      }, SectionAdd)
  
      local function UpdateSizeScroll()
        local OffsetY = 0
  
        for _, child in pairs(ScrolLayers:GetChildren()) do
          if child.Name ~= "UIListLayout" then
            OffsetY = OffsetY + 4 + child.Size.Y.Offset
          end
        end
        
        ScrolLayers.CanvasSize = UDim2.new(0, 0, 0, OffsetY)
      end
    
      local function UpdateSizeSection()
        if OpenSection then
          local SectionSizeYWitdh = 44
  
          for _, v in pairs(SectionAdd:GetChildren()) do
            if v.Name ~= "UIListLayout" and v.Name ~= "UICorner" then
              SectionSizeYWitdh = SectionSizeYWitdh + v.Size.Y.Offset + 4
            end
          end
    
          TweenService:Create(FeatureFrame, TweenInfo.new(0.2), {Rotation = 90, BackgroundTransparency = 0}):Play()
          TweenService:Create(Section, TweenInfo.new(0.2), {Size = UDim2.new(1, 1, 0, SectionSizeYWitdh)}):Play()
          TweenService:Create(SectionAdd, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, SectionSizeYWitdh - 44)}):Play()
          TweenService:Create(SectionDecideFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 3)}):Play()
            
          task.wait(0.3)
          UpdateSizeScroll()
        end
      end
local function ToggleSection()
    CircleClick(SectionButton, Player:GetMouse().X, Player:GetMouse().Y)

    if OpenSection then
        -- Tutup section
        TweenService:Create(FeatureFrame, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Rotation = 0}):Play()
        TweenService:Create(Section, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 1, 0, 30)}):Play()
        TweenService:Create(SectionDecideFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 0, 0, 2)}):Play()

        OpenSection = false
        task.wait(0.1)
        UpdateSizeScroll()
    else
        -- Buka section
        OpenSection = true

        local SectionSizeYWitdh = 38
        for _, v in pairs(SectionAdd:GetChildren()) do
            if v.Name ~= "UIListLayout" and v.Name ~= "UICorner" then
                SectionSizeYWitdh = SectionSizeYWitdh + v.Size.Y.Offset + 3
            end
        end

        TweenService:Create(FeatureFrame, TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Rotation = 90}):Play()
        TweenService:Create(Section, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 1, 0, SectionSizeYWitdh)}):Play()
        TweenService:Create(SectionAdd, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, SectionSizeYWitdh - 38)}):Play()
        TweenService:Create(SectionDecideFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 2)}):Play()

        task.wait(0.3)
        UpdateSizeScroll()
    end
end

    
      SectionButton.Activated:Connect(ToggleSection)
      SectionAdd.ChildAdded:Connect(UpdateSizeSection)
      SectionAdd.ChildRemoved:Connect(UpdateSizeSection)
    
      UpdateSizeScroll()

      local Item, ItemCount = {}, 0
function Item:AddParagraph(Config)
    local Title = Config[1] or Config.Title or ""
    local Content = Config[2] or Config.Content or ""
    local SettingFuncs = {}

    local Paragraph = Custom:Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.935,
        BorderSizePixel = 0,
        LayoutOrder = ItemCount,
        Size = UDim2.new(1, 0, 0, 35),
        Name = "Paragraph",
    }, SectionAdd)

    Custom:Create("UICorner", { CornerRadius = UDim.new(0, 4) }, Paragraph)

    local ParagraphTitle = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Title,
        TextColor3 = Color3.fromRGB(231, 231, 231),
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -16, 0, 13),
        Name = "ParagraphTitle",
    }, Paragraph)

    local ParagraphContent = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Content,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        TextTransparency = 0.6,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 25),
        Size = UDim2.new(1, -16, 0, 12),
        Name = "ParagraphContent",
        RichText = true,
        TextWrapped = true, -- wajib aktif
    }, Paragraph)

    local function UpdateParagraphSize()
        local textHeight = ParagraphContent.TextBounds.Y
        ParagraphContent.Size = UDim2.new(1, -16, 0, textHeight)
        Paragraph.Size = UDim2.new(1, 0, 0, textHeight + 35)

        UpdateSizeSection()
    end

    ParagraphContent:GetPropertyChangedSignal("Text"):Connect(UpdateParagraphSize)
    ParagraphContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(UpdateParagraphSize)

    local function parseColors(str)
        local coloredStr = str
        coloredStr = coloredStr:gsub('default%("([^"]-)"%)', '<font color="#ffffff"><b>%1</b></font>')
        coloredStr = coloredStr:gsub('red%("([^"]-)"%)', '<font color="#ff0000"><b>%1</b></font>')
        coloredStr = coloredStr:gsub('blue%("([^"]-)"%)', '<font color="#0000ff"><b>%1</b></font>')
        coloredStr = coloredStr:gsub('green%("([^"]-)"%)', '<font color="#00ff00"><b>%1</b></font>')
        return coloredStr
    end

    function SettingFuncs:Set(Config)
        local Title = Config[1] or Config.Title or ""
        local Content = Config[2] or Config.Content or ""
        ParagraphTitle.Text = Title
        ParagraphContent.Text = parseColors(Content)
        UpdateParagraphSize()
    end

    ParagraphContent.Text = parseColors(Content)
    UpdateParagraphSize()

    return SettingFuncs
end
      function Item:AddSeperator(Config)
        local Title = Config[1] or Config.Title or ""
        local Sep_Funcs = {}

        local Seperator = Custom:Create("Frame", {
          BackgroundColor3 = Color3.fromRGB(70, 70, 70),
          BackgroundTransparency = 0.1,
          BorderColor3 = Color3.fromRGB(0, 0, 0),
          BorderSizePixel = 1,
          LayoutOrder = ItemCount,
          Size = UDim2.new(1, 0, 0, 30),
          Name = "Seperator",
        }, SectionAdd)
      
        local SeperatorTitle = Custom:Create("TextLabel", {
          Font = Enum.Font.GothamBold,
          Text = Title,
          TextColor3 = Color3.fromRGB(231, 231, 231),
          TextStrokeColor3 = Color3.fromRGB(0, 0, 0),
          TextStrokeTransparency = 0.8,
          TextSize = 14,
          TextXAlignment = Enum.TextXAlignment.Left,
          TextYAlignment = Enum.TextYAlignment.Center,
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 1,
          BorderSizePixel = 0,
          Position = UDim2.new(0, 12, 0, 0),
          Size = UDim2.new(1, -16, 1, 0),
          Name = "SeperatorTitle",
        }, Seperator)
        
        Custom:Create("UICorner", {
          CornerRadius = UDim.new(0, 6),
        }, Seperator)
        
        local Gradient = Custom:Create("UIGradient", {
          Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 120, 120)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 120, 120))
          },
          Rotation = 90,
        }, Seperator)
  
        function Sep_Funcs:Set(Config)
          local Title = Config[1] or Config.Title or ""

          SeperatorTitle.Text = Title
        end

        ItemCount += 1
        return Sep_Funcs
      end

      function Item:AddLine()
        local LineFuncs = {}
    
        local Line = Custom:Create("Frame", {
          BackgroundColor3 = Color3.fromRGB(90, 90, 90),
          BackgroundTransparency = 0.2,
          BorderSizePixel = 0,
          LayoutOrder = ItemCount,
          Size = UDim2.new(1, 0, 0, 7),
          Name = "Line",
        }, SectionAdd)
    
        Custom:Create("UICorner", {CornerRadius = UDim.new(0, 3)}, Line)
    
        Custom:Create("UIGradient", {
          Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(80, 80, 80)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 80, 80))
          },
          Rotation = 0,
        }, Line)
    
        ItemCount += 1
        return LineFuncs
     end

      function Item:AddButton(Config)
        local Title = Config[1] or Config.Title or ""
        local Content = Config[2] or Config.Content or ""
        local Icon = Config[3] or Config.Icon or "rbxassetid://16932740082"
        local Callback = Config[4] or Config.Callback or function() end
        local Funcs_Button = {}

        local Button = Custom:Create("Frame", {
					Name = "Button",
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.935,
					BorderSizePixel = 0,
					LayoutOrder = ItemCount,
					Size = UDim2.new(1, 0, 0, 35)
				}, SectionAdd)

        Custom:Create("UICorner", {
          CornerRadius = UDim.new(0, 4)
        }, Button)

        Custom:Create("TextLabel", {
					Name = "ButtonTitle",
					Font = Enum.Font.GothamBold,
					Text = Title,
					TextColor3 = Color3.fromRGB(231, 231, 231),
					TextSize = 13,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextYAlignment = Enum.TextYAlignment.Top,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.999,
					BorderSizePixel = 0,
					Position = UDim2.new(0, 10, 0, 10),
					Size = UDim2.new(1, -100, 0, 13)
				}, Button)

        local ButtonContent = Custom:Create("TextLabel", {
					Name = "ButtonContent",
					Font = Enum.Font.GothamBold,
					Text = Content,
					TextColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 12,
					TextTransparency = 0.6,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextYAlignment = Enum.TextYAlignment.Bottom,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.999,
					BorderSizePixel = 0,
					Position = UDim2.new(0, 10, 0, 23),
					Size = UDim2.new(1, -100, 0, 12)
				}, Button)

        local function UpdateButtonSize()
          local _Height = 12 + (12 * (ButtonContent.TextBounds.X // ButtonContent.AbsoluteSize.X))
          ButtonContent.Size = UDim2.new(1, -100, 0, _Height)
          
          Button.Size = UDim2.new(1, 0, 0, ButtonContent.AbsoluteSize.Y + 33)
        end
      
        ButtonContent.TextWrapped = true
        UpdateButtonSize()
      
        ButtonContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
          ButtonContent.TextWrapped = false
          UpdateButtonSize()
          ButtonContent.TextWrapped = true
          UpdateSizeSection()
        end)

        local ButtonButton = Custom:Create("TextButton", {
					Name = "ButtonButton",
					Font = Enum.Font.SourceSans,
					Text = "",
					TextColor3 = Color3.fromRGB(0, 0, 0),
					TextSize = 14,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					BackgroundTransparency = 0.999,
					BorderSizePixel = 0,
					Size = UDim2.new(1, 0, 1, 0)
				}, Button)

        local FeatureFrame1 = Custom:Create("Frame", {
					Name = "FeatureFrame",
					AnchorPoint = Vector2.new(1, 0.5),
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					BackgroundTransparency = 0.999,
					BorderSizePixel = 0,
					Position = UDim2.new(1, -15, 0.5, 0),
					Size = UDim2.new(0, 25, 0, 25)
				}, Button)

        Custom:Create("ImageLabel", {
          Name = "FeatureImg",
          Image = Icon,
          AnchorPoint = Vector2.new(0.5, 0.5),
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 0.999,
          BorderSizePixel = 0,
          Position = UDim2.new(0.5, 0, 0.5, 0),
          Size = UDim2.new(1, 0, 1, 0)
        }, FeatureFrame1)

        ButtonButton.Activated:Connect(function()
					CircleClick(ButtonButton, Player:GetMouse().X, Player:GetMouse().Y)

					Callback()
				end)

        ItemCount += 1
				return Funcs_Button
      end

function Item:AddToggle(Config)
    local Title = Config[1] or Config.Title or ""
    local Content = Config[2] or Config.Content or ""
    local Default = Config[3] or Config.Default or false
    local Mode = Config[4] or Config.Mode or "Toggle" -- "Toggle" atau "Box"
    local Callback = Config[5] or Config.Callback or function() end

    local Funcs_Toggle = {Value = Default}

    local Toggle = Custom:Create("Frame", {
        Name = "Toggle",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.935,
        BorderSizePixel = 0,
        LayoutOrder = ItemCount,
        Size = UDim2.new(1, 0, 0, 35)
    }, SectionAdd)

    Custom:Create("UICorner", { CornerRadius = UDim.new(0, 4) }, Toggle)

    local ToggleTitle = Custom:Create("TextLabel", {
        Name = "ToggleTitle",
        Font = Enum.Font.GothamBold,
        Text = Title,
        TextSize = 13,
        TextColor3 = Color3.fromRGB(231, 231, 231),
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        BackgroundTransparency = 0.999,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -100, 0, 13)
    }, Toggle)

    local ToggleContent = Custom:Create("TextLabel", {
        Name = "ToggleContent",
        Font = Enum.Font.GothamBold,
        Text = Content,
        TextSize = 12,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextTransparency = 0.6,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Bottom,
        BackgroundTransparency = 0.999,
        Position = UDim2.new(0, 10, 0, 23),
        Size = UDim2.new(1, -100, 0, 12)
    }, Toggle)

    local function UpdateToggleSize()
        ToggleContent.TextWrapped = false
        local Ratio = ToggleContent.TextBounds.X / ToggleContent.AbsoluteSize.X
        ToggleContent.Size = UDim2.new(1, -100, 0, 12 + (12 * math.ceil(Ratio)))
        Toggle.Size = UDim2.new(1, 0, 0, ToggleContent.AbsoluteSize.Y + 33)
        ToggleContent.TextWrapped = true
    end

    UpdateToggleSize()
    ToggleContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
        UpdateToggleSize()
        UpdateSizeSection()
    end)

    local ToggleButton = Custom:Create("TextButton", {
        Name = "ToggleButton",
        Font = Enum.Font.SourceSans,
        Text = "",
        BackgroundTransparency = 0.999,
        Size = UDim2.new(1, 0, 1, 0)
    }, Toggle)

    -- Buat Box / Toggle
    local FeatureFrame = Custom:Create("Frame", {
        Name = "FeatureFrame",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = (Mode == "Toggle") and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = (Mode == "Toggle") and 0.92 or 0.3,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -15, 0.5, 0),
        Size = UDim2.new(0, 30, 0, 15)
    }, Toggle)

    Custom:Create("UICorner", { CornerRadius = UDim.new(0, 4) }, FeatureFrame)
    local UIStroke = Custom:Create("UIStroke", {
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 2,
        Transparency = (Mode == "Toggle") and 0.9 or 0.6
    }, FeatureFrame)

    local ToggleCircle
    if Mode == "Toggle" then
        ToggleCircle = Custom:Create("Frame", {
            Name = "ToggleCircle",
            BackgroundColor3 = Color3.fromRGB(230, 230, 230),
            BorderSizePixel = 0,
            Size = UDim2.new(0, 14, 0, 14),
            Position = UDim2.new(0, 0, 0, 0)
        }, FeatureFrame)
        Custom:Create("UICorner", { CornerRadius = UDim.new(0, 15) }, ToggleCircle)
    end

    local function Animate(Value)
        if Mode == "Toggle" then
            local TitleColor = Value and Custom.ColorRGB or Color3.fromRGB(230, 230, 230)
            local CirclePosition = Value and UDim2.new(0, 15, 0, 0) or UDim2.new(0, 0, 0, 0)
            local StrokeColor = Value and Custom.ColorRGB or Color3.fromRGB(255, 255, 255)
            local StrokeTransparency = Value and 0 or 0.9
            local FrameColor = Value and Custom.ColorRGB or Color3.fromRGB(255, 255, 255)
            local FrameTransparency = Value and 0 or 0.92
            local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

            TweenService:Create(ToggleTitle, tweenInfo, {TextColor3 = TitleColor}):Play()
            TweenService:Create(ToggleCircle, tweenInfo, {Position = CirclePosition}):Play()
            TweenService:Create(UIStroke, tweenInfo, {Color = StrokeColor, Transparency = StrokeTransparency}):Play()
            TweenService:Create(FeatureFrame, tweenInfo, {BackgroundColor3 = FrameColor, BackgroundTransparency = FrameTransparency}):Play()
        else
            -- Mode Box simple nyala/mati
            local FrameColor = Value and Custom.ColorRGB or Color3.fromRGB(0,0,0)
            local Transparency = Value and 0 or 0.3
            TweenService:Create(FeatureFrame, TweenInfo.new(0.2), {BackgroundColor3 = FrameColor, BackgroundTransparency = Transparency}):Play()
        end
    end

    ToggleButton.Activated:Connect(function()
        Funcs_Toggle.Value = not Funcs_Toggle.Value
        Funcs_Toggle:Set(Funcs_Toggle.Value)
    end)

    function Funcs_Toggle:Set(Value)
        Callback(Value)
        Animate(Value)
    end

    Funcs_Toggle:Set(Default)
    ItemCount += 1
    return Funcs_Toggle
end

   function Item:AddSlider(Config)
        local Title = Config[1] or Config.Title or ""
        local Content = Config[2] or Config.Content or ""
        local Increment = Config[3] or Config.Increment or 1
        local Min = Config[4] or Config.Min or 0
        local Max = Config[5] or Config.Max or 100
        local Default = Config[6] or Config.Default or 50
        local Callback = Config[7] or Config.Callback or function() end

				local Funcs_Slider = {Value = Default}
        
        local Slider = Custom:Create("Frame", {
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.9350000023841858,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					LayoutOrder = ItemCount,
					Size = UDim2.new(1, 0, 0, 35),
					Name = "Slider",
				}, SectionAdd)

        Custom:Create("UICorner", {
          CornerRadius = UDim.new(0, 4),
        }, Slider)

        Custom:Create("TextLabel", {
					Font = Enum.Font.GothamBold,
					Text = Title,
					TextColor3 = Color3.fromRGB(230, 230, 230),
					TextSize = 13,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextYAlignment = Enum.TextYAlignment.Top,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.9990000128746033,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(0, 10, 0, 10),
					Size = UDim2.new(1, -180, 0, 13),
					Name = "SliderTitle",
				}, Slider)

				local SliderContent = Custom:Create("TextLabel", {
					Font = Enum.Font.GothamBold,
					Text = Content,
					TextColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 12,
					TextTransparency = 0.6000000238418579,
					TextXAlignment = Enum.TextXAlignment.Left,
					TextYAlignment = Enum.TextYAlignment.Bottom,
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.9990000128746033,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(0, 10, 0, 23),
					Size = UDim2.new(1, -180, 0, 12),
					Name = "SliderContent",
				}, Slider)

        local function UpdateSliderSize()
          SliderContent.TextWrapped = false
          SliderContent.Size = UDim2.new(1, -180, 0, 12 + (12 * math.floor(SliderContent.TextBounds.X / SliderContent.AbsoluteSize.X)))
          Slider.Size = UDim2.new(1, 0, 0, SliderContent.AbsoluteSize.Y + 33)
          SliderContent.TextWrapped = true
        end

        SliderContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
          UpdateSliderSize()
          UpdateSizeSection()
        end)
        UpdateSliderSize()

        local SliderInput = Custom:Create("Frame", {
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundColor3 = Custom.ColorRGB,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(1, -155, 0.5, 0),
					Size = UDim2.new(0, 28, 0, 20),
					Name = "SliderInput",
				}, Slider)

        Custom:Create("UICorner", {
          CornerRadius = UDim.new(0, 5),
        }, SliderInput)

         
				local TextBox = Custom:Create("TextBox", {
					Font = Enum.Font.GothamBold,
					Text = "90",
					TextColor3 = Color3.fromRGB(255, 255, 255),
					TextSize = 13,
					TextWrapped = true,
					BackgroundColor3 = Color3.fromRGB(0, 0, 0),
					BackgroundTransparency = 0.9990000128746033,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(0, -1, 0, 0),
					Size = UDim2.new(1, 0, 1, 0),
				}, SliderInput)

        local SliderFrame = Custom:Create("Frame", {
					AnchorPoint = Vector2.new(1, 0.5),
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					BackgroundTransparency = 0.800000011920929,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(1, -20, 0.5, 0),
					Size = UDim2.new(0, 100, 0, 3),
					Name = "SliderFrame",
				}, Slider)

        Custom:Create("UICorner", {}, SliderFrame)

        local SliderDraggable = Custom:Create("Frame", {
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundColor3 = Custom.ColorRGB,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(0, 0, 0.5, 0),
					Size = UDim2.new(0.899999976, 0, 0, 1),
					Name = "SliderDraggable",
				}, SliderFrame)

        Custom:Create("UICorner", {}, SliderDraggable)

        local SliderCircle = Custom:Create("Frame", {
					AnchorPoint = Vector2.new(1, 0.5),
					BackgroundColor3 = Custom.ColorRGB,
					BorderColor3 = Color3.fromRGB(0, 0, 0),
					BorderSizePixel = 0,
					Position = UDim2.new(1, 4, 0.5, 0),
					Size = UDim2.new(0, 8, 0, 8),
					Name = "SliderCircle",
				}, SliderDraggable)

        Custom:Create("UICorner", {}, SliderCircle)

        Custom:Create("UIStroke", {
          Color = Custom.ColorRGB,
        }, SliderCircle)

        local Dragging = false

        local function Round(Number, Factor)
          local Result = math.floor(Number / Factor + (math.sign(Number) * 0.5)) * Factor
          if Result < 0 then 
            Result = Result + Factor 
          end
          return Result
        end
        
        function Funcs_Slider:Set(Value)
          Value = math.clamp(Round(Value, Increment), Min, Max)
          Funcs_Slider.Value = Value
          TextBox.Text = tostring(Value)
            
          TweenService:Create(SliderDraggable, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.fromScale((Value - Min) / (Max - Min), 1) }):Play()
        end
        
        SliderFrame.InputBegan:Connect(function(Input)
          if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
          end
        end)
      
        SliderFrame.InputEnded:Connect(function(Input)
          if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            Dragging = false
            Callback(Funcs_Slider.Value)
          end
        end)
      
        local _LastX = nil
        UserInputService.InputChanged:Connect(function(Input)
          if Dragging then
            local CurrPosX = Input.Position.X
            if CurrPosX ~= _LastX then
              _LastX = CurrPosX
      
              local SizeScale = math.clamp((CurrPosX - SliderFrame.AbsolutePosition.X) / SliderFrame.AbsoluteSize.X, 0, 1)
              Funcs_Slider:Set(Min + ((Max - Min) * SizeScale))
            end
          end
        end)
        
        TextBox:GetPropertyChangedSignal("Text"):Connect(function()
          local Valid = TextBox.Text:gsub("[^%d]", "")
          if Valid ~= "" then
            local ValidNumber = math.min(tonumber(Valid), Max)
            TextBox.Text = tostring(ValidNumber)
          else
            TextBox.Text = "0"
          end
        end)
        
        TextBox.FocusLost:Connect(function()
          if TextBox.Text ~= "" then
            Funcs_Slider:Set(tonumber(TextBox.Text))
            Callback(Funcs_Slider.Value)
          else
            Funcs_Slider:Set(0)
            Callback(Funcs_Slider.Value)
          end
        end)
        
        Funcs_Slider:Set(tonumber(Default))
        Callback(Funcs_Slider.Value)

        ItemCount += 1
				return Funcs_Slider
      end

      function Item:AddInput(Config)
        local Title = Config[1] or Config.Title or ""
        local Content = Config[2] or Config.Content or ""
        local Default = Config[3] or Config.Default or ""
        local Callback = Config[4] or Config.Callback or function() end
				local Funcs_Input = {Value = Default}

        local Input = Custom:Create("Frame", {
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 0.935,
          BorderColor3 = Color3.fromRGB(0, 0, 0),
          BorderSizePixel = 0,
          LayoutOrder = ItemCount,
          Size = UDim2.new(1, 0, 0, 35),
          Name = "Input",
        }, SectionAdd)

        Custom:Create("UICorner", {
          CornerRadius = UDim.new(0, 4),
        }, Input)

        local InputTitle = Custom:Create("TextLabel", {
          Font = Enum.Font.GothamBold,
          Text = Title,
          TextColor3 = Color3.fromRGB(230, 230, 230),
          TextSize = 13,
          TextXAlignment = Enum.TextXAlignment.Left,
          TextYAlignment = Enum.TextYAlignment.Top,
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 0.999,
          BorderColor3 = Color3.fromRGB(0, 0, 0),
          BorderSizePixel = 0,
          Position = UDim2.new(0, 10, 0, 10),
          Size = UDim2.new(1, -180, 0, 13),
          Name = "InputTitle",
        }, Input)

        local InputContent = Custom:Create("TextLabel", {
          Font = Enum.Font.GothamBold,
          Text = Content,
          TextColor3 = Color3.fromRGB(255, 255, 255),
          TextSize = 12,
          TextTransparency = 0.6,
          TextWrapped = true,
          TextXAlignment = Enum.TextXAlignment.Left,
          TextYAlignment = Enum.TextYAlignment.Bottom,
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 0.999,
          BorderColor3 = Color3.fromRGB(0, 0, 0),
          BorderSizePixel = 0,
          Position = UDim2.new(0, 10, 0, 23),
          Size = UDim2.new(1, -180, 0, 12),
          Name = "InputContent",
          Parent = Input
        })

        local function UpdateInputSize()
          local Ratio = InputContent.TextBounds.X / InputContent.AbsoluteSize.X
          local Calculated = 12 + (12 * math.floor(Ratio))

          InputContent.Size = UDim2.new(1, -180, 0, Calculated)
          Input.Size = UDim2.new(1, 0, 0, InputContent.AbsoluteSize.Y + 33)
        end
      
        UpdateInputSize()
      
        InputContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
          InputContent.TextWrapped = false
          UpdateInputSize()
          InputContent.TextWrapped = true
          UpdateSizeSection()
        end)

        local InputFrame = Custom:Create("Frame", {
          AnchorPoint = Vector2.new(1, 0.5),
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 0.95,
          BorderColor3 = Color3.fromRGB(0, 0, 0),
          BorderSizePixel = 0,
          ClipsDescendants = true,
          Position = UDim2.new(1, -7, 0.5, 0),
          Size = UDim2.new(0, 148, 0, 30),
          Name = "InputFrame"
        }, Input)
    

        Custom:Create("UICorner", {
          CornerRadius = UDim.new(0, 4)
        }, InputFrame)

        local InputTextBox = Custom:Create("TextBox", {
          CursorPosition = -1,
          Font = Enum.Font.GothamBold,
          PlaceholderColor3 = Color3.fromRGB(120, 120, 120),
          PlaceholderText = "Write your input there",
          Text = "",
          TextColor3 = Color3.fromRGB(255, 255, 255),
          TextSize = 12,
          TextXAlignment = Enum.TextXAlignment.Left,
          AnchorPoint = Vector2.new(0, 0.5),
          BackgroundColor3 = Color3.fromRGB(255, 255, 255),
          BackgroundTransparency = 0.999,
          BorderColor3 = Color3.fromRGB(0, 0, 0),
          BorderSizePixel = 0,
          Position = UDim2.new(0, 5, 0.5, 0),
          Size = UDim2.new(1, -10, 1, -8),
          Name = "InputTextBox"
        }, InputFrame)

        function Funcs_Input:Set(Value)
					InputTextBox.Text = Value
					Funcs_Input.Value = Value
					Callback(Value)
				end

				InputTextBox.FocusLost:Connect(function()
					Funcs_Input:Set(InputTextBox.Text)
				end)

				Funcs_Input:Set(Default)

        ItemCount += 1
				return Funcs_Input
      end

function Item:AddDropdown(Config)
    local Title = Config[1] or Config.Title or ""
    local Content = Config[2] or Config.Content or ""
    local Multi = Config[3] or Config.Multi or false
    local Options = Config[4] or Config.Options or {}
    local Default = Config[5] or Config.Default or {}
    local Callback = Config[6] or Config.Callback or function() end

    -- Ensure Default is always a table for internal consistency
    if type(Default) ~= "table" then
        Default = Default and {Default} or {}
    end
    
    local Funcs_Dropdown = {Value = Default, Options = Options}

    local Dropdown = Custom:Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.935,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        LayoutOrder = ItemCount,
        Size = UDim2.new(1, 0, 0, 35),
        Name = "Dropdown"
    }, SectionAdd)

    local DropdownButton = Custom:Create("TextButton", {
        Font = Enum.Font.SourceSans,
        Text = "",
        TextColor3 = Color3.fromRGB(0, 0, 0),
        TextSize = 14,
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Name = "ToggleButton"
    }, Dropdown)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 4)
    }, Dropdown)

    local DropdownTitle = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Title,
        TextColor3 = Color3.fromRGB(230, 230, 230),
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -180, 0, 13),
        Name = "DropdownTitle",
        Parent = Dropdown
    })

    local DropdownContent = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = Content,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        TextTransparency = 0.6,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Bottom,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 23),
        Size = UDim2.new(1, -180, 0, 12),
        Name = "DropdownContent",
        Parent = Dropdown
    })
    
    DropdownContent.Size = UDim2.new(1, -180, 0, 12 + (12 * (DropdownContent.TextBounds.X // DropdownContent.AbsoluteSize.X)))
    DropdownContent.TextWrapped = true
    Dropdown.Size = UDim2.new(1, 0, 0, DropdownContent.AbsoluteSize.Y + 33)
    
    DropdownContent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
        DropdownContent.TextWrapped = false
        
        DropdownContent.Size = UDim2.new(1, -180, 0, 12 + (12 * (DropdownContent.TextBounds.X // DropdownContent.AbsoluteSize.X)))
        Dropdown.Size = UDim2.new(1, 0, 0, DropdownContent.AbsoluteSize.Y + 33)
        
        DropdownContent.TextWrapped = true
        UpdateSizeSection()
    end)

    local SelectOptionsFrame = Custom:Create("Frame", {
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.95,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(1, -7, 0.5, 0),
        Size = UDim2.new(0, 148, 0, 30),
        Name = "SelectOptionsFrame",
        LayoutOrder = CountDropdown
    }, Dropdown)

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 4)
    }, SelectOptionsFrame)

    DropdownButton.Activated:Connect(function()
        if not MoreBlur.Visible then
            MoreBlur.Visible = true
            
            local tweenInfo = TweenInfo.new(0.1)

            DropPageLayout:JumpToIndex(SelectOptionsFrame.LayoutOrder)
                        
            local BlurTween = TweenService:Create(MoreBlur, tweenInfo, {BackgroundTransparency = 0.7})
            local DropdownTween = TweenService:Create(DropdownSelect, tweenInfo, {Position = UDim2.new(1, -11, 0.5, 0)})
            
            BlurTween:Play()
            DropdownTween:Play()
        end
    end)

    local OptionSelecting = Custom:Create("TextLabel", {
        Font = Enum.Font.GothamBold,
        Text = "",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        TextTransparency = 0.6,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0.5, 0),
        Size = UDim2.new(1, -30, 1, -8),
        Name = "OptionSelecting",
    }, SelectOptionsFrame)

    local OptionImg = Custom:Create("ImageLabel", {
        Image = "rbxassetid://16851841101",
        ImageColor3 = Color3.fromRGB(231, 231, 231),
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Position = UDim2.new(1, 0, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Name = "OptionImg",
    }, SelectOptionsFrame)

    local ScrollSelect = Custom:Create("ScrollingFrame", {
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0),
        ScrollBarThickness = 0,
        Active = true,
        LayoutOrder = CountDropdown,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.999,
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Name = "ScrollSelect",
    }, DropdownFolder)
    
    -- Create Search Bar with proper positioning
    local SearchBar = Custom:Create("TextBox", {
        Font = Enum.Font.GothamBold,
        PlaceholderText = "Search options...",
        PlaceholderColor3 = Color3.fromRGB(120, 120, 120),
        Text = "",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 12,
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BackgroundTransparency = 0.3,
        BorderColor3 = Color3.fromRGB(80, 80, 80),
        BorderSizePixel = 1,
        Size = UDim2.new(1, -6, 0, 25),
        Position = UDim2.new(0, 3, 0, 3),
        Name = "SearchBar",
        LayoutOrder = -1, -- Put search bar at the top
        Parent = ScrollSelect
    })

    Custom:Create("UICorner", {
        CornerRadius = UDim.new(0, 4)
    }, SearchBar)

    Custom:Create("UIListLayout", {
        Padding = UDim.new(0, 3),
        SortOrder = Enum.SortOrder.LayoutOrder,
    }, ScrollSelect)

    -- Search Bar Logic - Fixed
    SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
        local searchText = SearchBar.Text:lower()
        for _, optionFrame in pairs(ScrollSelect:GetChildren()) do
            if optionFrame:IsA("Frame") and optionFrame.Name == "Option" then
                local optionText = optionFrame:FindFirstChild("OptionText")
                if optionText then
                    local shouldShow = searchText == "" or optionText.Text:lower():find(searchText, 1, true) ~= nil
                    optionFrame.Visible = shouldShow
                end
            end
        end
        
        -- Update canvas size after search
        local function UpdateCanvasSize()
            local OffsetY = 28 -- Account for search bar
            for _, child in ipairs(ScrollSelect:GetChildren()) do
                if child.Name ~= "UIListLayout" and child.Name ~= "SearchBar" and child.Visible then
                    OffsetY = OffsetY + 3 + child.Size.Y.Offset
                end
            end
            ScrollSelect.CanvasSize = UDim2.new(0, 0, 0, OffsetY)
        end
        UpdateCanvasSize()
    end)

    local DropCount = 0

    function Funcs_Dropdown:Clear()
        for _, DropFrame in pairs(ScrollSelect:GetChildren()) do
            if DropFrame.Name == "Option" then
                DropFrame:Destroy()
            end
        end
        Funcs_Dropdown.Value = {}
        Funcs_Dropdown.Options = {}
        OptionSelecting.Text = "Select Options"
        DropCount = 0
    end
    
    function Funcs_Dropdown:Set(Value)
        Funcs_Dropdown.Value = Value or Funcs_Dropdown.Value

        for _, Drop in pairs(ScrollSelect:GetChildren()) do
            if Drop.Name == "Option" then
                local optionText = Drop:FindFirstChild("OptionText")
                if optionText then
                    local isTextFound = table.find(Funcs_Dropdown.Value, optionText.Text)
                    local tweenInfoInOut = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

                    local Size = isTextFound and UDim2.new(0, 1, 0, 12) or UDim2.new(0, 0, 0, 0)
                    local BackgroundTransparency = isTextFound and 0.935 or 0.999
                    local Transparency = isTextFound and 0 or 0.999
            
                    local chooseFrame = Drop:FindFirstChild("ChooseFrame")
                    if chooseFrame then
                        TweenService:Create(chooseFrame, tweenInfoInOut, {Size = Size}):Play()
                        local stroke = chooseFrame:FindFirstChild("UIStroke")
                        if stroke then
                            TweenService:Create(stroke, tweenInfoInOut, {Transparency = Transparency}):Play()
                        end
                    end
                    TweenService:Create(Drop, tweenInfoInOut, {BackgroundTransparency = BackgroundTransparency}):Play()
                end
            end
        end
    
        local DropdownValueTable = table.concat(Funcs_Dropdown.Value, ", ")
        OptionSelecting.Text = DropdownValueTable ~= "" and DropdownValueTable or "Select Options"
        
        -- For single selection, pass the first value as string, for multi pass the table
        if Multi then
            Callback(Funcs_Dropdown.Value)
        else
            Callback(Funcs_Dropdown.Value[1] or "")
        end
    end

    function Funcs_Dropdown:AddOption(OptionName)
        OptionName = OptionName or "Option"

        local Option = Custom:Create("Frame", {
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.999,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            LayoutOrder = DropCount,
            Size = UDim2.new(1, 0, 0, 30),
            Name = "Option",
            Visible = true -- Ensure options are visible by default
        }, ScrollSelect)

        Custom:Create("UICorner", {
            CornerRadius = UDim.new(0, 3)
        }, Option)

        local OptionButton = Custom:Create("TextButton", {
            Font = Enum.Font.GothamBold,
            Text = "",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BackgroundTransparency = 0.999,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            Name = "OptionButton"
        }, Option)

        local OptionText = Custom:Create("TextLabel", {
            Font = Enum.Font.GothamBold,
            Text = OptionName,
            TextSize = 13,
            TextColor3 = Color3.fromRGB(230, 230, 230),
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Center,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 8, 0, 0),
            Size = UDim2.new(1, -16, 1, 0),
            Name = "OptionText"
        }, Option)

        local ChooseFrame = Custom:Create("Frame", {
            AnchorPoint = Vector2.new(0, 0.5),
            BackgroundColor3 = Custom.ColorRGB,
            BorderColor3 = Color3.fromRGB(0, 0, 0),
            BorderSizePixel = 0,
            Position = UDim2.new(0, 2, 0.5, 0),
            Size = UDim2.new(0, 0, 0, 0),
            Name = "ChooseFrame"
        }, Option)

        Custom:Create("UIStroke", {
            Color = Custom.ColorRGB,
            Thickness = 1.6,
            Transparency = 0.999
        }, ChooseFrame)

        Custom:Create("UICorner", {}, ChooseFrame)

        OptionButton.Activated:Connect(function()
            CircleClick(OptionButton, Player:GetMouse().X, Player:GetMouse().Y)
        
            local isOptionSelected = Option.BackgroundTransparency > 0.95

            if Multi then
                if isOptionSelected then
                    if not table.find(Funcs_Dropdown.Value, OptionName) then
                        table.insert(Funcs_Dropdown.Value, OptionName)
                    end
                else
                    for i, value in ipairs(Funcs_Dropdown.Value) do
                        if value == OptionName then
                            table.remove(Funcs_Dropdown.Value, i)
                            break
                        end
                    end
                end
            else
                Funcs_Dropdown.Value = {OptionName}
            end

            Funcs_Dropdown:Set(Funcs_Dropdown.Value)
        end)
    
        -- Update canvas size function - Fixed
        local function UpdateCanvasSize()
            task.wait() -- Small delay to ensure layout has updated
            local OffsetY = 28 -- Account for search bar height + padding
            
            for _, child in ipairs(ScrollSelect:GetChildren()) do
                if child.Name ~= "UIListLayout" and child.Name ~= "SearchBar" and child.Visible then
                    OffsetY = OffsetY + 3 + child.Size.Y.Offset
                end
            end

            ScrollSelect.CanvasSize = UDim2.new(0, 0, 0, OffsetY)
        end
    
        UpdateCanvasSize()
        DropCount += 1
    end

    function Funcs_Dropdown:Refresh(RefreshList, Selecting)
        RefreshList = RefreshList or {}
        Selecting = Selecting or {}
        
        Funcs_Dropdown:Clear()
        
        for _, Drop in ipairs(RefreshList) do
            Funcs_Dropdown:AddOption(Drop)
        end

        Funcs_Dropdown.Options = RefreshList
        Funcs_Dropdown:Set(Selecting)
    end

    -- Initialize with options
    Funcs_Dropdown:Refresh(Funcs_Dropdown.Options, Funcs_Dropdown.Value)

    ItemCount += 1
    CountDropdown += 1
    return Funcs_Dropdown
end

      ItemCount += 1
      return Item
    end

    CountTab += 1
    return Sections
  end

  return Tabs
end

return Speed_Library
